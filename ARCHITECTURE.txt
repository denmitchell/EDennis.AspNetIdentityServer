This solution consists of several projects that are mostly modeled after IdentityServer quickstart projects:

**See Item 1K for changes in this branch vs. the master

1. EDennis.AspNetIdentityServer.Lib -- a project that combines AspNetIdentity and IdentityServer functionality
   into a single project.  Note that a partial user interface was scaffolded, but almost no customization
   was performed.  Here are some of the steps I took to setup the project:
   A. Create a new Web Application (I used MVC) with AspNetIdentity support
   B. Add various package references to IdentityServer, Entity Framework, and Serilog (see the .csproj file)
   C. Modify the Startup class to support IdentityServer with AspNetIdentity
   D. Modify the Config class so that 
      i.   The Api1 ApiResource has a secret (for reference token support) and selected UserClaims are returned
      ii.  The mvc client has these additional properties (to support Authorization Code and reference tokens)
            - AllowedGrantTypes = GrantTypes.Code,
            - RequirePkce = true,
            - AccessTokenType = AccessTokenType.Reference,
   E. Modify the Program class to seed IdentityServer and AspNetIdentity tables if a command-line argument
      "/seed" is provided
   F. Create two self-hosting launch profiles -- one of which includes the "/seed" command-line argument
   G. Scaffold out Identity Pages for Login, Logout, Register, ConfirmEmail, AccessDenied, 
      RegisterConfirmation, and _StatusMessage; and move the entire Pages folder to the project root
      (which is the default expected location for these pages).
   H. Create MockEmailSender (: IEmailSender) and register it in the DI
   J. Add connection strings in appsettings.Development.json
   K. ***Replaced IdentityServer's ProfileService with UserClientClaimsProfileService, which
      gets the roles and role claims associated with a role whose prefix is the clientid, 
      as well as all requested user claims for the API

   * NOTE: The .Lib prefix was added because the AspNetIdentityServer project will be split into three projects
           in the future to support a NuGet/Launcher architecture for Api solutions.

2. Api1 & Api2 -- Web API projects with a single controller: IdentityController, which
   has a number of GET endpoints, some of which are protected by Authorized Roles and some of which are
   protected by Authorized policies.

   - See the Startup class for the definition of authorization policies
   - See the IdentityController for the various protected endpoints 
   - See the Startup class for how to configure authentication using .AddIdentityServerAuthentication 
     (which has support for ReferenceTokens)

3. Client -- a console app that can be used to test direct authorized access to Api1 using Client Credentials Flow

4. MvcApp -- an MVC application that uses OpenIdConnect Authorization Code flow to securely connect to Api1
   - The project uses a "named client" (IHttpClientFactory) approach to encapsulating communications with Api1
     (see the Api1 class in the project)
   - The project uses a TokenPropagatingHandler (based upon Kevin Dockx's BearerTokenHandler)
     to propagate the access token from the MVC app to Api1.  This class is configured in Startup
   - The HomeController class has a Logout endpoint that clears all cookies, logging the user 
     out of the application and identity server.  This could be configured differently.
   - The project makes use of an Apis section in appsettings.Development.json.
   - See the Startup class for additional configurations.

5. BlazorApp -- which is a Blazor version of the MvcApp, except that the project points to
   Api2, rather than Api1.